const vec2 poisson_disc[12] =
vec2[](
    vec2(-0.660338, 0.524539),
    vec2(-0.0668229, 0.82771),
    vec2(0.220004, 0.368886),
    vec2(-0.534499, -0.212372),
    vec2(0.349885, -0.550522),
    vec2(0.801843, 0.412226),
    vec2(-0.0854322, -0.0594698),
    vec2(0.914888, -0.142864),
    vec2(0.42871, -0.0716376),
    vec2(-0.451328, -0.753912),
    vec2(0.0223647, -0.931169),
    vec2(0.547568, 0.823463)
);

float texture2DCompare(sampler2DShadow depths, vec2 uv, float compare){
    return texture(depths, vec3(uv, compare));
}

float SampleShadowMap(sampler2DShadow shadow_map, vec2 base_uv, in float u, in float v, in vec2 blur_size, in float depth)
{
	vec2 uv = base_uv + vec2(u, v) * blur_size;

	return texture2DCompare(shadow_map, uv, depth);
}

// PCF quality from The Witness
float PCF_Filter7x7(sampler2DShadow shadow_map, vec2 uv, float z, float blur_amount) {
    vec2 blur_size = vec2(1.0) / textureSize(shadow_map, 0);

    uv /= blur_size;

    vec2 base_uv;
    base_uv.x = floor(uv.x + 0.5);
    base_uv.y = floor(uv.y + 0.5);

    float s = (uv.x + 0.5 - base_uv.x);
    float t = (uv.y + 0.5 - base_uv.y);

    base_uv -= vec2(0.5, 0.5);
    base_uv *= blur_size;

    uv = base_uv;

    float sum = 0;

    float uw0 = (5 * s - 6);
    float uw1 = (11 * s - 28);
    float uw2 = -(11 * s + 17);
    float uw3 = -(5 * s + 1);

    float u0 = (4 * s - 5) / uw0 - 3;
    float u1 = (4 * s - 16) / uw1 - 1;
    float u2 = -(7 * s + 5) / uw2 + 1;
    float u3 = -s / uw3 + 3;

    float vw0 = (5 * t - 6);
    float vw1 = (11 * t - 28);
    float vw2 = -(11 * t + 17);
    float vw3 = -(5 * t + 1);

    float v0 = (4 * t - 5) / vw0 - 3;
    float v1 = (4 * t - 16) / vw1 - 1;
    float v2 = -(7 * t + 5) / vw2 + 1;
    float v3 = -t / vw3 + 3;

    sum += uw0 * vw0 * SampleShadowMap(shadow_map, uv, u0, v0, blur_size, z);
    sum += uw1 * vw0 * SampleShadowMap(shadow_map, uv, u1, v0, blur_size, z);
    sum += uw2 * vw0 * SampleShadowMap(shadow_map, uv, u2, v0, blur_size, z);
    sum += uw3 * vw0 * SampleShadowMap(shadow_map, uv, u3, v0, blur_size, z);

    sum += uw0 * vw1 * SampleShadowMap(shadow_map, uv, u0, v1, blur_size, z);
    sum += uw1 * vw1 * SampleShadowMap(shadow_map, uv, u1, v1, blur_size, z);
    sum += uw2 * vw1 * SampleShadowMap(shadow_map, uv, u2, v1, blur_size, z);
    sum += uw3 * vw1 * SampleShadowMap(shadow_map, uv, u3, v1, blur_size, z);

    sum += uw0 * vw2 * SampleShadowMap(shadow_map, uv, u0, v2, blur_size, z);
    sum += uw1 * vw2 * SampleShadowMap(shadow_map, uv, u1, v2, blur_size, z);
    sum += uw2 * vw2 * SampleShadowMap(shadow_map, uv, u2, v2, blur_size, z);
    sum += uw3 * vw2 * SampleShadowMap(shadow_map, uv, u3, v2, blur_size, z);

    sum += uw0 * vw3 * SampleShadowMap(shadow_map, uv, u0, v3, blur_size, z);
    sum += uw1 * vw3 * SampleShadowMap(shadow_map, uv, u1, v3, blur_size, z);
    sum += uw2 * vw3 * SampleShadowMap(shadow_map, uv, u2, v3, blur_size, z);
    sum += uw3 * vw3 * SampleShadowMap(shadow_map, uv, u3, v3, blur_size, z);

    return sum / 2704;
}
